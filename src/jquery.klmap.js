/*! * kl Maps JavaScript Library v0.1 * http:# * * Copyright 2010, Kafka Liu * Dual licensed under the MIT or GPL Version 2 licenses. * http:# * * Date: Mon Nov 08 11:00:00 2010 +0800 */(function($) {  function KlMap(canvas, $selector, options) {    // create the map    var map = new google.maps.Map(canvas, options.mapOptions);    var markerClusterer;    //var markers = [];        var infoWindow;        var iwo;        // public methods    $.extend(this, {      destroy: function() {},      getMap: function() {        return map;      },      getMarkers: function() {        return markerClusterer.getMarkers();//        return markers;      },      appendMarkers: function(data) {        if ($.isArray(data)) {          var markers = [];          $(data).each(function(i, e) {            // convert the original data type to google maps.            e.position = new google.maps.LatLng(e.position.latitude, e.position.longitude);                        var marker = new google.maps.Marker(e);                        // bind the infowindow to the event of the marker            if (infoWindow) {              google.maps.event.addListener(marker, options.infoWindow.event, function() {                if ($.isFunction(iwo.options.content)) {                  var s = iwo.options.content(marker) + "";                  infoWindow.setContent(s);                }                infoWindow.open(map, marker);              });            }                        marker.setMap(map);            markers.push(marker);          });          markerClusterer = markerClusterer || new MarkerClusterer(map);          markerClusterer.addMarkers(markers);                  } else if ($.isFunction(data)) {          this.appendMarkers(data());        }      },    });    // create info window and avoid others to re create it.    iwo = options.infoWindow;        var iwocopy = iwo;    if (iwo) {      if ($.isFunction(iwo.options.content)) {        iwocopy = $.extend({}, iwo.options, {content : ""});      }      switch (iwo.style) {        default:          infoWindow = new google.maps.InfoWindow(iwocopy.options);                    if (iwo.handlers) {            for(var p in iwo.handlers) {              google.maps.event.addListener(infoWindow, p, iwo.handlers[p]);            };          }      }    }    // create markers    this.appendMarkers(options.markers);      }    //TODO  function detectLocation() {    // Try W3C Geolocation method (Preferred)    if(navigator.geolocation) {      navigator.geolocation.getCurrentPosition(function(position) {        return new google.maps.LatLng(position.coords.latitude, position.coords.longitude);      }, function() {        $.error("Error: The Geolocation service failed.");      });    } else if (google.gears) {      // Try Google Gears Geolocation      var geo = google.gears.factory.create('beta.geolocation');      geo.getCurrentPosition(function(position) {        return new google.maps.LatLng(position.latitude,position.longitude);      }, function() {        $.error("Error: The Geolocation service failed.");      });    } else {      // Browser doesn't support Geolocation        $.error("Error: Your browser doesn't support geolocation.");    }    return;  }    // jQuery Implementation  $.fn.klmap = function(options, callbacks) {    // if not defined the center, try to detect it.    var glatlng;    if (typeof options.mapOptions.center == "undefined") {      glatlng = detectLocation();      glatlng = glatlng ? glatlng : $.fn.klmap.defaults.center;    } else {      glatlng = new google.maps.LatLng(options.mapOptions.center.latitude, options.mapOptions.center.longitude);    }        $.extend(options.mapOptions, {center: glatlng});        // remove old data    var el = this.data("klmap");    if (el) {       el.destroy();	      this.removeData("klmap");    }            return this.each(function(i, e) {      var $e = $(e),          klmap = new KlMap(e, $e, options);                    $e.data("klmap", klmap);          //          if ($.isFunction(gopts.markers)) {//            createMarkers($e, gmap, gopts.markers);//          }                    return klmap;//      if (callbacks.onloaded != null) {//        google.maps.event.addListener(gmap, 'tilesloaded', callbacks.onloaded($e));//      }    });      };    /*    function createMarkers($klmap, gmap, fn) {      var markers = fn.call($klmap).markers;      $klmap.markers = [];      for (var i = 0, l = markers.length; i < l; i++) {        var gmarker = new google.maps.Marker({          position: new google.maps.LatLng(markers[i].latitude, markers[i].longitude),          map: gmap,                  });        $klmap.markers.push(gmarker);      }    }  */    /*  $.fn.klmap.init = function(options) {    var script,        opts = $.extend({}, $.fn.klmap.defaults, options);        script = document.createElement("script");    script.type = "text/javascript";    script.src = opts.apiurl + "?sensor=" + opts.is_sensor;    document.body.appendChild(script);    $.fn.klmap.MAPTYPES = {      ROADMAP: google.maps.MapTypeId.ROADMAP,      SATELLITE: google.maps.MapTypeId.SATELLITE,      HYBRID: google.maps.MapTypeId.HYBRID,      TERRAIN: google.maps.MapTypeId.TERRAIN,    }  };  */    $.fn.klmap.defaults = {    is_sensor: false,    apiurl: "http://maps.google.com/maps/api/js",    center: new google.maps.LatLng(31.2181747, 121.612137),  };    $.fn.klmap.conf = {    infoWindowStyles : {      google: true,    },  }})(jQuery);